name: Deploy STMS to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Build Docker image
      run: |
        docker build -f Dockerfile.simple -t stms-app:latest .
        
    - name: Deploy infrastructure
      run: |
        # Since we already have infrastructure, we'll skip this step
        # Infrastructure is already deployed with resource group 'stms'
        echo "Infrastructure already exists"
        
    - name: Get ACR name and login
      run: |
        ACR_NAME=$(az acr list --resource-group stms --query "[0].name" -o tsv)
        echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
        az acr login --name $ACR_NAME
        
    - name: Tag and push image to ACR
      run: |
        IMAGE_TAG="v$(date +%Y%m%d%H%M%S)"
        docker tag stms-app:latest $ACR_NAME.azurecr.io/stms-app:$IMAGE_TAG
        docker tag stms-app:latest $ACR_NAME.azurecr.io/stms-app:latest
        docker push $ACR_NAME.azurecr.io/stms-app:$IMAGE_TAG
        docker push $ACR_NAME.azurecr.io/stms-app:latest
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
    - name: Deploy to Azure App Service
      run: |
        APP_NAME=$(az webapp list --resource-group stms --query "[0].name" -o tsv)
        az webapp config container set \
          --name $APP_NAME \
          --resource-group stms \
          --container-image-name $ACR_NAME.azurecr.io/stms-app:$IMAGE_TAG
          
    - name: Wait for deployment to complete
      run: |
        APP_NAME=$(az webapp list --resource-group stms --query "[0].name" -o tsv)
        echo "Waiting for container to fully start..."
        sleep 120
        
    - name: Verify application health
      run: |
        APP_NAME=$(az webapp list --resource-group stms --query "[0].name" -o tsv)
        APP_URL="https://$APP_NAME.azurewebsites.net"
        
        echo "Checking application health (basic connectivity only)..."
        for i in {1..10}; do
          if curl -s --connect-timeout 10 --max-time 30 "$APP_URL" > /dev/null; then
            echo "✅ Application is responding"
            break
          else
            echo "⏳ Waiting for application to start (attempt $i/10)..."
            sleep 30
          fi
        done
        
        echo "🔄 Container deployment completed"
        echo "📋 Database operations should be run manually via web endpoints:"
        echo "   - Migrations: $APP_URL/setup-database"
        echo "   - Seeding: $APP_URL/seed-database"
        
    - name: Deployment summary
      run: |
        APP_NAME=$(az webapp list --resource-group stms --query "[0].name" -o tsv)
        echo "✅ Container deployment completed successfully!"
        echo "🌐 Application URL: https://$APP_NAME.azurewebsites.net"
        echo "🐳 Container Image: $ACR_NAME.azurecr.io/stms-app:$IMAGE_TAG"
        echo ""
        echo "� Next Steps - Run these manually when needed:"
        echo "   🗄️  Database Migrations: https://$APP_NAME.azurewebsites.net/setup-database"
        echo "   🌱 Database Seeding: https://$APP_NAME.azurewebsites.net/seed-database"
        echo "   ✅ Health Check: https://$APP_NAME.azurewebsites.net/test-db"
        echo "   📊 Data Verification: https://$APP_NAME.azurewebsites.net/check-data"
        echo ""
        echo "⚠️  Database operations are intentionally manual to prevent deployment conflicts"
