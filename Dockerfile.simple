# Use PHP 8.3 with FPM as base image for better performance
FROM php:8.3-fpm

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libjpeg-dev \
    libfreetype6-dev \
    libxml2-dev \
    libzip-dev \
    libonig-dev \
    zip \
    unzip \
    nodejs \
    npm \
    nginx \
    supervisor \
    default-mysql-client \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy application files
COPY . .

# Install PHP dependencies
RUN composer install --optimize-autoloader --no-interaction

# Clear Laravel caches to avoid stale service provider references
RUN php artisan config:clear || true
RUN php artisan cache:clear || true
RUN php artisan route:clear || true
RUN php artisan view:clear || true

# Install Node.js dependencies and build assets
RUN npm ci && npm run build && npm prune --production

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache

# Create required directories for nginx and logs
RUN mkdir -p /var/log/nginx /tmp \
    && chown -R www-data:www-data /var/log/nginx

# Configure nginx
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Configure PHP-FPM
COPY docker/php-fpm.conf /usr/local/etc/php-fpm.d/www.conf

# Configure supervisord
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create simplified startup script without database operations
RUN echo '#!/bin/bash' > /startup.sh && \
    echo 'set -e' >> /startup.sh && \
    echo 'echo "Starting Laravel application..."' >> /startup.sh && \
    echo '' >> /startup.sh && \
    echo '# Copy environment file if not exists' >> /startup.sh && \
    echo 'if [ ! -f .env ]; then' >> /startup.sh && \
    echo '  echo "Copying .env.example to .env"' >> /startup.sh && \
    echo '  cp .env.example .env' >> /startup.sh && \
    echo 'fi' >> /startup.sh && \
    echo '' >> /startup.sh && \
    echo '# Generate Laravel application key if not set' >> /startup.sh && \
    echo 'if grep -q "APP_KEY=$" .env; then' >> /startup.sh && \
    echo '  echo "Generating Laravel application key..."' >> /startup.sh && \
    echo '  php artisan key:generate' >> /startup.sh && \
    echo 'fi' >> /startup.sh && \
    echo '' >> /startup.sh && \
    echo '# Clear and optimize Laravel caches' >> /startup.sh && \
    echo 'echo "Optimizing Laravel caches..."' >> /startup.sh && \
    echo 'php artisan config:cache' >> /startup.sh && \
    echo 'php artisan route:cache' >> /startup.sh && \
    echo 'php artisan view:cache' >> /startup.sh && \
    echo '' >> /startup.sh && \
    echo '# Test nginx configuration' >> /startup.sh && \
    echo 'echo "Testing nginx configuration..."' >> /startup.sh && \
    echo 'nginx -t || exit 1' >> /startup.sh && \
    echo '' >> /startup.sh && \
    echo '# Test PHP-FPM configuration' >> /startup.sh && \
    echo 'echo "Testing PHP-FPM configuration..."' >> /startup.sh && \
    echo 'php-fpm -t || exit 1' >> /startup.sh && \
    echo '' >> /startup.sh && \
    echo 'echo "Laravel application ready!"' >> /startup.sh && \
    echo 'exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' >> /startup.sh && \
    chmod +x /startup.sh

# Expose port 80
EXPOSE 80

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start with our custom startup script
CMD ["/startup.sh"]
